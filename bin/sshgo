#!/usr/bin/python3
# -*- coding: UTF-8 -*-

import signal,argparse,os,getpass
import platform
try:
    from Vulcan import parseConfig,AutoSSH,Message
except ImportError:
    print("Vulcan lib is not find")
    os._exit(1)


def mkUsersCfg(user,configfile):
    config=parseConfig(configfile)
    password = getpass.getpass('Type your ssh password:')
    config._userInfo[user] = str(config.encrypt(password))
    #print(config._userInfo[user])
    #os._exit(0)
    return config.overWriteConfig()


def main():


    prg = os.path.basename(__file__)
    if prg == 'sshgo':
        Usage = 'sshgo [-h] [-u SSHUSER] [-p SSHPORT] [-i Public key file ] [-J JUMPHOST] [-P JUMPHOSTSSHPORT] < [ HostName [sudouser] ] | [ mkconfig ] >'
    elif prg == 'scpgo':
        Usage = 'sshgo [-h] [-u SSHUSER] [-p SSHPORT] [-i Public key file ] [-J JUMPHOST] [-P JUMPHOSTSSHPORT] < HostName:/path/srcfile HostName:/path/distfile >'

    msg = Message()
    signal.signal(signal.SIGINT,lambda sig,data: os._exit(1))

    parser = argparse.ArgumentParser(prog='sshgo',
            usage= Usage,
            description="Auto ssh remote host and don't type your password! ^_^ ")

    parser.add_argument('-u','--user',
            action ="store",
            dest   ="sshUser",
            required=False,
            default=getpass.getuser(),
            help   ='assign ssh login user,default is local current login user' )
    parser.add_argument('-p','--port',
            action ="store",
            dest   ="sshPort",
            required=False,
            default =22,
            help   ='ssh port,default is 22' )
    parser.add_argument('-J','--jumphost',
            action ="store",
            dest   ="jumphost",
            required=False,
            default =None,
            help   ='ssh jumphost ' )
    parser.add_argument('-P','--jumpsshport',
            action ="store",
            dest   ="jumphostsshport",
            required=False,
            default =22,
            help   ='ssh jumphost port default 22 ' )
    parser.add_argument('-i','--identity_file',
            action ="store",
            dest   ="identity_file",
            required=False,
            #default ='~/./ssh/id_rsa',
            default = None,
            help   ='ssh Private key file path default None' )
    parser.add_argument('loginInfo',
            action="store",
            nargs='*',
            help  ='assign will auto ssh login remote hostname or IP address and you want sudo to user')

    args = parser.parse_args()
    #args.func(args)
    #print(args)
    #os._exit(0)

    ostype = platform.system()

    if ostype == 'Linux' or ostype == 'SunOS':
        configfile = '/home/%s/.go.yml' % args.sshUser
        sshbin='/usr/bin/ssh'
    elif ostype == 'Darwin' :
        sshbin='/usr/bin/ssh'
        configfile = '/Users/%s/.go.yml' % args.sshUser
    elif ostype == 'Windows':
        configfile = 'C:\go.yml' % args.sshUser
        sshbin = r'C:\program files\cygwin\usr\bin\ssh'

    exitCode=0

    """
    no args then print help info
    """
    if len(args.loginInfo) == 0:
        parser.print_help()
        os._exit(0)


    if args.loginInfo[0] == 'mkconfig':
        if  mkUsersCfg(args.sshUser,configfile):
            print(msg.OkGreen('make config %s SUCCESS!' % configfile) )
        else:
            print(msg.Failed('make config %s Failed' % configfile))
            exitCode=1

        os._exit(exitCode)
    elif args.loginInfo[0] != 'mkconfig' and len(args.loginInfo) == 1: 
        remoteHost = args.loginInfo[0]
        sudoUser   = None
    else:
        remoteHost = args.loginInfo[0]
        sudoUser   = args.loginInfo[1]
        

    try:
        ssh = AutoSSH(remoteHost,args.sshUser,configfile,args.sshPort, sudoUser, args.jumphost, args.jumphostsshport, args.identity_file, sshbin)
        signal.signal(signal.SIGWINCH,ssh._resizeWin)
        ssh.sshInteract()

    except Exception as e:
        print(msg.Failed("ssh failed on login."))
        print(e)


""" ----------------------------------------------------- """


if __name__ == '__main__' :
    main()
