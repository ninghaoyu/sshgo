#!/usr/bin/python3
# -*- coding: UTF-8 -*-

import signal,argparse,os,getpass
try:
    from Vulcan import parseConfig,AutoSSH,Message
except ImportError:
    print("Vulcan lib is not find")
    os._exit(1)


def mkUsersCfg(user,configfile):
    config=parseConfig(configfile)
    password = getpass.getpass('Type your ssh password:')
    config._userInfo[user] = config.encrypt(password).encode('utf-8')
    #print(config._userInfo[user])
    #os._exit(0)
    return config.overWriteConfig()


def main():
    msg = Message()
    signal.signal(signal.SIGINT,lambda sig,data: os._exit(1))

    parser = argparse.ArgumentParser(prog='sshgo',description="Auto ssh remote host and don't type your password! ^_^ ")
    parser.add_argument('-u','--user',
            action ="store",
            dest   ="sshUser",
            required=False,
            default=getpass.getuser(),
            help   ='assign ssh login user,default is local current login user' )
    parser.add_argument('loginInfo',
            action="store",
            nargs='*',
            help  ='assign will auto ssh login remote hostname or IP address')
    #parser.add_argument('sudoUser',
    #        action  ="store",
    #        nargs   ='?',
    #        default = None,
    #        help='remote sudo user,default is root' )

    args = parser.parse_args()
    #args.func(args)
    #print(args)
    #os._exit(0)

    configfile = '/home/%s/.go.yml' % args.sshUser
    exitCode=0

    if len(args.loginInfo) == 0:
        parser.print_help()
        os._exit(0)


    if args.loginInfo[0] == 'mkconfig':
        if  mkUsersCfg(args.sshUser,configfile):
            print(msg.OkGreen('make config %s SUCCESS!' % configfile) )
        else:
            print(msg.Failed('make config %s Failed' % configfile))
            exitCode=1

        os._exit(exitCode)
    elif args.loginInfo[0] != 'mkconfig' and len(args.loginInfo) == 1: 
        remoteHost = args.loginInfo[0]
        sudoUser   = None
    else:
        remoteHost = args.loginInfo[0]
        sudoUser   = args.loginInfo[1]
        

    try:
        ssh = AutoSSH(remoteHost,args.sshUser,configfile,sudoUser)
        signal.signal(signal.SIGWINCH,ssh._resizeWin)
        ssh.sshInteract()

    except Exception as e:
        print(msg.Failed("ssh failed on login."))
        print(e)


"""
-----------------------------------------------------
"""


if __name__ == '__main__' :
    main()
